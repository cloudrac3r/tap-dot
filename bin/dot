#!/usr/bin/env node

const stream = require("stream")
var parser = require('tap-out');
var color = require('colorette');
var out = stream.Transform()
out._transform = (a, b, c) => c(null, a)
var tap = parser();
var currentTestName = '';
var errors = [];
var extra = [];
var assertCount = 0;
var lastComment;

process.stdin.pipe(tap);

out.write('\n');

function outPush (str) {

  out.write('  ' + str);
};

tap.on('comment', function (comment) {

  lastComment = comment;
});

var firstTestDone = false;

tap.on('assert', function (res) {

  var key = (res.ok) ? 'green' : 'red';

  assertCount +=1;

  if (res.ok) {
    (firstTestDone)
      ? out.write(color[key]('.'))
      : outPush(color[key]('.'));

    firstTestDone = true;
  }
  if (!res.ok) {
    out.write(color[key]('x'));
  }
});

tap.on('extra', function (str) {

  if (str !== '') extra.push(str);
});

tap.on('output', function (res) {

  if (res.fail && res.fail.length || assertCount === 0) {
    outPush('\n\n\n');

    res.fail.forEach(function (failure) {
        outPush(color.white('---') + '\n');

        // Use the unwrapped out.write here as the raw error is already indented
        for (const line of failure.error.raw.split("\n")) {
          if (line.includes("stack: |-")) break
          out.write(line + '\n');
        }

        var stackPadding = '           '
        out.write(color.dim(stackPadding + failure.error.stack.replace(/\n/g, '\n  ' + stackPadding)) + '\n');

        outPush(color.white('...') + '\n');
    });

    errors = res.fail;
    outputExtra();

    statsOutput();

    outPush(color.red(res.fail.length + ' failed'));

    var past = (res.fail.length == 1) ? 'was' : 'were';
    var plural = (res.fail.length == 1) ? 'failure' : 'failures';

    outPush('\n\n');
    outPush(color.red('Failed Tests: '));
    outPush('There ' + past + ' ' + color.red(res.fail.length) + ' ' + plural + '\n\n');

    res.fail.forEach(function (error) {
      outPush('  ' + color.red('x') + ' ' + error.name + '\n');
    });

    outPush('\n');
  }
  else{
    statsOutput();

    outPush('\n');
    outPush(color.green('Pass!') + '\n');
  }

  function statsOutput () {

    outPush('\n\n')
    outPush(res.tests.length + ' tests\n');
    outPush(color.green(res.pass.length + ' passed\n'));
  }
});

function outputExtra () {

  console.log(extra.join('\n'));
}

out.pipe(process.stdout);

process.on('exit', function () {

  if (errors.length || assertCount === 0) {
    process.exit(1);
  }
});
